// Code generated by goro; DO NOT EDIT.

package app

// This file was generated by the goro tool.
// Editing this file might prove futile when you re-run the goro commands

import (
	"sync"
	"errors"
    {{ renderImports "storage" "definition" .Chunks }}
	"{{ .App.Module }}/internal/config"
	"go.uber.org/zap/zapcore"
)

type Logger interface {
	Debug(string, ...zapcore.Field)
	Info(string, ...zapcore.Field)
	Error(string, ...zapcore.Field)
	Fatal(string, ...zapcore.Field)
}

type App struct {
	cfg config.Config

	c     *Container
	cOnce *sync.Once

	//hc     health.Checker
	//hcOnce *sync.Once

	{{ renderDefinition "storage" .Chunks }}

	logger Logger
}

var a *App

func NewApp(configPath string) (*App, error) {
	cfg, err := config.NewConfig(configPath)
	if err != nil {
		return nil, err
	}

	app := &App{
		cOnce:  &sync.Once{},
		//hcOnce: &sync.Once{},
		cfg:    cfg,
	}

	//goro:init logger
	app.initLogger()

	//goro:init healthChecker
	//app.initHealthChecker()

	{{ renderInitializationsWithError "storage" "app" .Chunks }}

	//goro:init dependencies
	app.c = NewContainer({{range .Chunks}}{{if eq .Scope `storage`}}app.{{.Name}},{{end}}{{end}})

	return app, nil
}

func SetGlobalApp(app *App) {
	a = app
}

func GetGlobalApp() (*App, error) {
	if a == nil {
		return nil, errors.New("global app is not initialized")
	}

	return a, nil
}